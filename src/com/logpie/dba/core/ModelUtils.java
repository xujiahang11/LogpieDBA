package com.logpie.dba.core;


import com.logpie.dba.annotation.AutoGenerate;
import com.logpie.dba.annotation.Column;
import com.logpie.dba.annotation.ReferencedColumn;
import com.logpie.dba.annotation.ID;
import com.logpie.dba.support.Assert;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

class ModelUtils {

    /**
     * get a list of Key-Value Pair objects of model
     *
     * @param model               is related java entity instance
     * @param hasAutoGeneratedKey determines whether the map contains auto-generated keys
     * @return a list of KVP objects, where key is database key label and value
     * is java entity
     */
    static List<KVP> getKVPsFrom(final Model model, final boolean hasAutoGeneratedKey)
    {
        Assert.notNull(model, "Model must not be null");

        Table table = CacheUtil.get(model.getClass());
        List<KVP> kvps = new ArrayList<>();

        for (Field field : table)
        {
            if (!hasAutoGeneratedKey && field.isAnnotationPresent(AutoGenerate.class))
            {
                continue;
            }

            Column column = field.getAnnotation(Column.class);
            Object value = null;
            if (field.isAnnotationPresent(ReferencedColumn.class))
            {
                Model foreignEntity = (Model) ReflectionUtil.runGetter(field, model);
                value = getIdValueFrom(foreignEntity);
            } else
            {
                value = ReflectionUtil.runGetter(field, model);
            }

            kvps.add(new KVP(column.label(), value));
        }

        return kvps;
    }

    static Number getIdValueFrom(final Model model)
    {
        Assert.notNull(model, "Model must not be null");

        Table table = CacheUtil.get(model.getClass());
        Field idField = table.getIdField();
        Assert.notNull(idField, "Cannot find @ID from this table");

        return (Number) ReflectionUtil.runGetter(idField, model);
    }

}
